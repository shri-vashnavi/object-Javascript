***Basic Que***

Task 1 - 


let car = {
    make: 'Toyota',
    model: 'Corolla',
    year: 2020,
    color: 'Blue'
};


console.log(car);

// Add the owner property
car.owner = 'John Doe';


console.log(car);

Task 2-
function getProperty(obj, propName) {
   
    if (obj.hasOwnProperty(propName)) {
        return obj[propName];
    } else {
        return `Property "${propName}" does not exist.`;
    }
}


const car = {
    make: 'Toyota',
    model: 'Corolla',
    year: 2020,
    color: 'Blue'
};

console.log(getProperty(car, 'make'));   
console.log(getProperty(car, 'owner'));

Task 3-

function printObjectProperties(obj) {
 
    for (let key in obj) {
       
        if (obj.hasOwnProperty(key)) {
            console.log(`${key}: ${obj[key]}`);
        }
    }
}


const car = {
    make: 'Toyota',
    model: 'Corolla',
    year: 2020,
    color: 'Blue'
};

printObjectProperties(car);

Task 4-

function mergeObjects(obj1, obj2) {
    return { ...obj1, ...obj2 };
}


const obj1 = {
    name: 'Alice',
    age: 25,
    city: 'Noida'
};

const obj2 = {
    age: 30,
    city: 'Delhi',
    occupation: 'Engineer'
};

const mergedObject = mergeObjects(obj1, obj2);
console.log(mergedObject);


Task 5-

function deleteProperty(obj, propName) {
    
    if (obj.hasOwnProperty(propName)) {
        delete obj[propName];
        return true; 
    } else {
        return false; 
    }
}


const car = {
    make: 'Toyota',
    model: 'Corolla',
    year: 2020,
    color: 'Blue'
};

console.log(deleteProperty(car, 'color')); 
console.log(car);  2020 }

console.log(deleteProperty(car, 'owner')); 

Task 6-

function hasProperty(obj, propName) {
    return obj.hasOwnProperty(propName);
}

const car = {
    make: 'Toyota',
    model: 'Corolla',
    year: 2020,
    color: 'Blue'
};

console.log(hasProperty(car, 'make'));   
console.log(hasProperty(car, 'owner'));  

Task 7-

const user = {
    name: 'Alice',
    age: 25,

    greet() {
        console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
    },

    updateAge(newAge) {
        this.age = newAge;
        console.log(`Age updated to ${this.age}.`);
    }
};

***Advance Que***
task 1-

function deepCopy(obj) {
   
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }

   
    if (obj instanceof Date) {
        return new Date(obj.getTime());
    }

   
    if (obj instanceof RegExp) {
        return new RegExp(obj);
    }

   
    if (Array.isArray(obj)) {
        return obj.map(item => deepCopy(item));
    }

    
    const copy = {};
    for (let key in obj) {
        if (obj.hasOwnProperty(key)) {
            copy[key] = deepCopy(obj[key]);
        }
    }

    return copy;
}


const original = {
    name: 'Alice',
    age: 25,
    hobbies: ['reading', 'hiking'],
    nestedObj: {
        greet() { console.log('Hello!'); },
        dateOfBirth: new Date(1995, 11, 17),
        regex: /abc/i
    }
};

const copy = deepCopy(original);


console.log(copy);
copy.nestedObj.greet();   
console.log(copy.nestedObj.dateOfBirth);  
console.log(copy.nestedObj.regex);        


copy.hobbies.push('swimming');
console.log(original.hobbies);  
console.log(copy.hobbies);      


user.greet();         
user.updateAge(30);    
user.greet();         

Task 2-

function deepEqual(obj1, obj2) {

    if (obj1 === obj2) {
        return true;
    }

    
    if (typeof obj1 !== 'object' || obj1 === null || typeof obj2 !== 'object' || obj2 === null) {
        return false;
    }

   
    const keys1 = Object.keys(obj1);
    const keys2 = Object.keys(obj2);
    if (keys1.length !== keys2.length) {
        return false;
    }

    
    for (let key of keys1) {
        if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {
            return false;
        }
    }

    return true;
}


const objA = {
    name: 'Alice',
    age: 25,
    nested: {
        hobbies: ['reading', 'hiking'],
        details: { isActive: true }
    }
};

const objB = {
    name: 'Alice',
    age: 25,
    nested: {
        hobbies: ['reading', 'hiking'],
        details: { isActive: true }
    }
};

const objC = {
    name: 'Alice',
    age: 25,
    nested: {
        hobbies: ['reading', 'hiking', 'swimming'],  
        details: { isActive: true }
    }
};

console.log(deepEqual(objA, objB)); 
console.log(deepEqual(objA, objC)); 
